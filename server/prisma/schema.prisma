generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:07062021@localhost:3306/mundo_teki"
}

model categories {
  id    Int     @id @default(autoincrement()) @db.UnsignedInt
  name  String  @db.VarChar(100)
  posts posts[]
}

model comments {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int       @db.UnsignedInt
  post_id      Int       @db.UnsignedInt
  content      String    @db.VarChar(200)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  is_published Boolean
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_1")
  posts        posts     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model images {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  image_url   String        @db.VarChar(255)
  name        String        @db.VarChar(100)
  post_images post_images[]
  posts       posts[]
}

model post_images {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  post_id  Int    @db.UnsignedInt
  image_id Int    @db.UnsignedInt
  posts    posts  @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_images_ibfk_1")
  images   images @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_images_ibfk_2")

  @@index([image_id], map: "image_id")
  @@index([post_id], map: "post_id")
}

model posts {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  title       String        @db.VarChar(255)
  description String        @db.Text
  content     String        @db.Text
  created_at  DateTime?     @default(now()) @db.Timestamp(0)
  author      String        @db.VarChar(100)
  image_id    Int           @db.UnsignedInt
  user_id     Int           @db.UnsignedInt
  category_id Int           @db.UnsignedInt
  is_active   Boolean       @default(true)
  comments    comments[]
  post_images post_images[]
  images      images        @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_1")
  users       users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_2")
  categories  categories    @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_ibfk_3")

  @@index([category_id], map: "category_id")
  @@index([image_id], map: "image_id")
  @@index([user_id], map: "user_id")
}

model roles {
  id        Int @id @default(autoincrement()) @db.UnsignedInt
  role_type Int @db.UnsignedInt
}

model users {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  username   String     @db.VarChar(50)
  email      String     @db.VarChar(50)
  password   String     @db.VarChar(500)
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  is_active  Boolean    @default(true)
  role_id    Int        @default(0) @db.UnsignedInt
  comments   comments[]
  posts      posts[]
}

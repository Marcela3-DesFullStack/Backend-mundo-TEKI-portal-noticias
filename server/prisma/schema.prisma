generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id    Int     @id @default(autoincrement()) @db.UnsignedInt
  name  String  @db.VarChar(100)
  posts posts[]
}

model comments {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int      @db.UnsignedInt
  post_id      Int      @db.UnsignedInt
  content      String   @db.VarChar(200)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  is_published Boolean
  posts        posts    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_post_id_foreign")
  users        users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_user_id_foreign")

  @@index([post_id], map: "comments_post_id_foreign")
  @@index([user_id], map: "comments_user_id_foreign")
}

model images {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  image_url String @db.VarChar(255)
  name      String @db.VarChar(100)
}

model posts {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  title       String     @db.VarChar(255)
  content     String     @db.Text
  created_at  DateTime   @default(now()) @db.Timestamp(0)
  author      String     @db.VarChar(100)
  image_url   String     @db.VarChar(500)
  user_id     Int        @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  description String     @db.Text
  is_active   Boolean    @default(true) @map("is active")
  comments    comments[]
  categories  categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_category_id_foreign")
  users       users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_user_id_foreign")

  @@index([category_id], map: "posts_category_id_foreign")
  @@index([user_id], map: "posts_user_id_foreign")
}

model roles {
  id        Int   @id @default(autoincrement()) @db.UnsignedInt
  role_type Int   @db.UnsignedInt
  users     users @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_id_foreign")
}

model users {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  username   String     @db.VarChar(50)
  email      String     @db.VarChar(50)
  password   String     @db.VarChar(500)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  is_active  Boolean    @default(true)
  role_id    Int        @default(0) @db.UnsignedInt
  comments   comments[]
  posts      posts[]
  roles      roles?
}

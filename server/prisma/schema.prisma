generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id    String  @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  name  String  @db.VarChar(50)
  posts posts[]
}

model comments {
  id         String   @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  user_id    String   @db.VarChar(100)
  post_id    String   @db.VarChar(100)
  content    String   @db.VarChar(500)
  created_at DateTime @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "comments_ibfk_1")
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "comments_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model posts {
  id          String     @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  title       String     @db.VarChar(255)
  content     String     @db.Text
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  author      String     @db.VarChar(50)
  image_url   String     @db.VarChar(255)
  user_id     String     @db.VarChar(100)
  category_id String     @db.VarChar(50)
  category    String     @db.VarChar(100)
  comments    comments[]
  users       users      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "posts_ibfk_1")
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "posts_ibfk_2")

  @@index([category_id], map: "category_id")
  @@index([user_id], map: "user_id")
}

model roles {
  id        String      @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  role_type Int         @unique(map: "role_type")
  user_role user_role[]
  users     users[]
}

model user_role {
  id      String @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  user_id String @unique(map: "user_id") @db.VarChar(100)
  role_id String @db.VarChar(100)
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_role_ibfk_1")
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "user_role_ibfk_2")

  @@index([role_id], map: "role_id")
}

model users {
  id         String     @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  username   String     @unique(map: "username") @db.VarChar(50)
  email      String     @unique(map: "email") @db.VarChar(50)
  password   String     @db.VarChar(500)
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  is_active  Boolean
  post_id    String     @db.VarChar(100)
  comment_id String     @db.VarChar(100)
  role_id    String     @db.VarChar(100)
  comments   comments[]
  posts      posts[]
  user_role  user_role?
  roles      roles      @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "users_ibfk_1")

  @@index([role_id], map: "role_id")
}
